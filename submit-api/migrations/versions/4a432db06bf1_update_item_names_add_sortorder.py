""" Update item type names and add sort_order to items and package_item_types

Revision ID: 4a432db06bf1
Revises: acc74a5b1219
Create Date: 2024-10-01 15:05:18.694759

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "4a432db06bf1"
down_revision = "acc74a5b1219"
branch_labels = None
depends_on = None

contact_information = "Contact Information"
contact_information_form = "Contact Information Form"
consultation_records = "Consultation Record(s)"
management_plan_submission = "Management Plan Submission"
management_plan = "Management Plan"


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("items", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("sort_order", sa.Integer(), nullable=True, server_default="0"))

    with op.batch_alter_table("package_item_types", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("sort_order", sa.Integer(), nullable=True, server_default="0"))

    # Update item type names
    op.execute(
        f"UPDATE item_types SET name = '{contact_information_form}' WHERE name = '{contact_information}'"
    )
    op.execute(
        f"UPDATE item_types SET name = '{management_plan}' WHERE name = '{management_plan_submission}'"
    )
    op.execute("UPDATE submissions SET version = 1 WHERE version IS NULL")

    # Now alter the column to be NOT NULL
    with op.batch_alter_table('submissions') as batch_op:
        batch_op.alter_column(
            'version', existing_type=sa.Integer(), nullable=False)

    # Get the connection object
    conn = op.get_bind()

    # Fetch the package_type_id for the Management Plan
    result = conn.execute(
        sa.text("SELECT id FROM package_types WHERE name = :name").bindparams(
            name='Management Plan')
    ).fetchone()

    if result is None:
        raise ValueError("No package type found for 'Management Plan'")

    package_type_id = result[0]

    if result is None:
        raise ValueError("No package type found for 'Management Plan'")

    package_type_id = result[0]

    # Fetch the item_type_ids for the associated item types
    item_types = conn.execute(
        sa.text("""
            SELECT id, name FROM item_types
            WHERE name IN ('Management Plan', 'Consultation Record(s)', 'Contact Information Form')
        """)
    ).fetchall()

    # Define sort orders for the item types
    sort_orders = {
        'Contact Information Form': 0,
        'Consultation Record(s)': 1,
        'Management Plan': 2
    }

    for item_type in item_types:
        # Perform update using conn.execute with raw SQL
        conn.execute(
            sa.text(
                """
                UPDATE package_item_types
                SET sort_order = :sort_order
                WHERE package_type_id = :package_type_id AND item_type_id = :item_type_id
                """
            ),
            {
                'package_type_id': package_type_id,
                'item_type_id': item_type[0],
                'sort_order': sort_orders[item_type[1]]
            }
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop `sort_order`
    with op.batch_alter_table("items", schema=None) as batch_op:
        batch_op.drop_column("sort_order")

    with op.batch_alter_table("package_item_types", schema=None) as batch_op:
        batch_op.drop_column("sort_order")

    # Revert the item type names to their original values
    op.execute(
        f"UPDATE item_types SET name = '{contact_information}' WHERE name = '{contact_information_form}'"
    )
    op.execute(
        f"UPDATE item_types SET name = '{management_plan_submission}' WHERE name = '{management_plan}'"
    )

    # ### end Alembic commands ###
